@Library('common-pipelines@10.12.0') _

import groovy.transform.Field
import org.doordash.JenkinsDd

// -----------------------------------------------------------------------------------
//
// Pipeline for updating migrations for payment-service
//
// The following params are automatically provided by the callback gateway as inputs
// to the Jenkins pipeline that starts this job.
//
// params["SHA"]                    - Sha used to start the pipeline
// params["BRANCH_NAME"]            - Name of GitHub branch the SHA is associated with
// params["UNIQUE_BUILD_ID"]        - A randomly generated unique ID for this job run
// params["ENQUEUED_AT_TIMESTAMP"]  - Unix timestamp generated by callback gateway
// params["JSON"]                   - Extensible json doc with extra information
// params["GITHUB_REPOSITORY"]      - GitHub ssh url of repository (git://....)
// -----------------------------------------------------------------------------------

pipeline {
  options {
    timestamps()
    skipStagesAfterUnstable()
    timeout(time: 30, unit: 'MINUTES')
  }
  agent {
    label 'universal'
  }
  stages {
    stage('Deploy to staging') {
      steps {
        artifactoryLogin()
        script {
          common = load "${WORKSPACE}/Jenkinsfile-common.groovy"
          common.deployHelm(params['GITHUB_REPOSITORY'], params['SHA'], params['BRANCH_NAME'], 'payment-service-migration', 'staging'
          )
        }
      }
    }
    stage('Reading staging results') {
      steps {
        script {
          println 'Query for splunk:'
          println "index=staging kubernetes.labels.job-name=payment-service-migration-job | table log | reverse"
          withCredentials([file(credentialsId: "K8S_CONFIG_STAGING_NEW", variable: 'k8sCredsFile')]) {
            sh """|#!/bin/bash
                  |set -ex
                  |export KUBECONFIG=$k8sCredsFile
                  |# Find pod name so that we can manage it
                  |POD_NAME=''
                  |for i in 1 2 4 8; do
                  |  POD_NAME=\$(kubectl get pods -n staging --selector='job-name=payment-service-migration-job' -o name)
                  |  if [[ "\${POD_NAME}" != "" ]]; then
                  |    echo "Found pod \${POD_NAME}"
                  |    break
                  |  fi
                  |  echo "Did not find pod, waiting for \${i} seconds"
                  |  sleep \$i
                  |done
                  |if [[ "\${POD_NAME}" == "" ]]; then
                  |  echo "Failed to find pod for payment-service-migration-job"
                  |  exit 1
                  |fi
                  |
                  |# Wait for job to be completed.
                  |kubectl wait --for=condition=complete --timeout=5m job.batch/payment-service-migration-job -n staging
                  |# Pod is completed, gather logs from it
                  |kubectl logs -n staging \$POD_NAME -f &
                  |# kubectl wait --for=condition=complete --timeout=5m job.batch/payment-service-migration-job -n staging
                  |kubectl delete job payment-service-migration-job -n staging
                  |""".stripMargin()
          }
        }
      }
    }
  }
}
